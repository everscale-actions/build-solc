name: Build and release solidity compiler

on: 
  push:
  workflow_dispatch:
  schedule:    
    - cron:  '0 0 * * *'

env:
  SOLIDITY_COMPILLER_OWNER: tonlabs
  SOLIDITY_COMPILLER_REPO: TON-Solidity-Compiler
  SOLIDITY_COMPILLER_BRANCH: master

jobs:
  build-n-release:
    runs-on: ubuntu-latest
    steps:          
      - name: Check TON-Solidity-Compiler for new commits
        uses: actions/github-script@v2
        id: detect-latest-commit
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const { data: { commit: { sha, html_url } } } = await github.repos.getBranch({
              owner: process.env.SOLIDITY_COMPILLER_OWNER,
              repo: process.env.SOLIDITY_COMPILLER_REPO,
              branch: process.env.SOLIDITY_COMPILLER_BRANCH,
            })
              
            const shaShort = sha.substr(0, 12)  
            core.exportVariable('SOURCE_REPO_SHA', sha)
            core.exportVariable('SOURCE_REPO_SHA_SHORT', shaShort)
            core.exportVariable('SOURCE_REPO_COMMIT_LINK', html_url)

            try {
              var { data: { tag_name: latestReleaseTag } } = await github.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            } catch (e) {              
              if (e.name == 'HttpError' && e.status == 404) {
                latestReleaseTag = null
              } else { throw e; }              
            }            

            core.exportVariable('IS_NEW_REVISION', shaShort !== latestReleaseTag)
            
      - name: Check out TON-Solidity-Compiler
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        uses: actions/checkout@v2
        with:
          repository: ${{env.SOLIDITY_COMPILLER_OWNER}}/${{env.SOLIDITY_COMPILLER_REPO}}
          ref: ${{ env.SOURCE_REPO_SHA }}
          
      - name: Install dependencies
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        run: |
          cd compiler
          sh ./scripts/install_deps.sh      

      - name: Build solc
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        run: |
          mkdir -p compiler/build
          cd compiler/build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . -- -j8
      
      - name: Prepare release assets
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        run: |          
          cd $GITHUB_WORKSPACE/compiler/build/solc
          tar -czvf $GITHUB_WORKSPACE/solc.tar.gz solc
          cd $GITHUB_WORKSPACE/lib
          tar -czvf $GITHUB_WORKSPACE/stdlib_sol.tvm.tar.gz stdlib_sol.tvm
          
      - name: Create Release
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.SOURCE_REPO_SHA_SHORT }}"
          release_name: Solidity compiller ${{ env.SOURCE_REPO_SHA_SHORT }}
          body: "Source commit: ${{ env.SOURCE_REPO_COMMIT_LINK }}"
          draft: false
          prerelease: false
          
      - name: Upload Release Asset [solc]
        if: ${{ env.IS_NEW_REVISION == 'true' }}        
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: solc.tar.gz
          asset_name: solc.tar.gz
          asset_content_type: application/tar+gzip

      - name: Upload Release Asset [stdlib_sol.tvm.tar.gz]
        if: ${{ env.IS_NEW_REVISION == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: stdlib_sol.tvm.tar.gz
          asset_name: stdlib_sol.tvm.tar.gz
          asset_content_type: application/tar+gzip